package linked.list;

public class LinkedList <T>{
    Node head ;
    Node n =new Node (0);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
public void insert(T Value ){
//    Arguments: value
//    Returns: nothing
//    Adds a new node with that value to the head of the list with an O(1) Time performance.
    Node FirsNode = new Node(Value);
    FirsNode.Next= this.head;
    this.head=FirsNode;

}
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

public  Boolean includes(T Value){
//    Arguments: value
//    Returns: Boolean
//    Indicates whether that value exists as a Nodeâ€™s value somewhere within the list.
    Node thePointer =this.head;
    while(thePointer!=null )
    {
        if(thePointer.Value==Value)
           return true;
        thePointer=thePointer.Next;
    }
    return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

public String ToString(){
//   Arguments: none
//   Returns: a string representing all the values in the Linked List, formatted as:
//   "{ a } -> { b } -> { c } -> NULL"
    Node thePointerS=this.head;
    String Str = new String("");
    while(thePointerS != null){
        Str+="{ "+thePointerS.Value+" }=> ";
        thePointerS=thePointerS.Next;
    }

    Str+="{NULL}";
    return Str;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

public void LinkedList(){
    this.head = null;
}
}
