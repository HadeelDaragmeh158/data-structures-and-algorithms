/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.stackandqueue;
import com.stackandqueue.StackQueue.Queue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
//
//import org.junit.jupiter.api.Test;
//import static org.junit.jupiter.api.Assertions.*;

import com.stackandqueue.StackQueue.Stack;
import org.junit.jupiter.api.Test;

import java.util.EmptyStackException;

import static org.junit.jupiter.api.Assertions.assertEquals;

class AppTest {

//    Stack myTestStack;
//    Queue myTestQueue;
//
//    @BeforeEach
//    void setUpstack() {
//        myTestStack = new Stack();
//    }
//
//    void setUpQueue() {
//        myTestQueue = new Queue();
//    }

    @Test
//    Can successfully push onto a stack
    void pushIntoStack() {
        Stack<String> name1 = new Stack<>();
        String value1 = name1.push("Hadeel").toString();
        assertEquals("Node{value=Hadeel, pointerToNextNode=null} Stack{top=Node{value=Hadeel, pointerToNextNode=null}}",name1);
    }

    @Test
//    Can successfully push multiple values onto a stack
    void pushMultiValueStack() {
        Stack<Integer> stackNumbers = new Stack<>();
        stackNumbers.push(1);
        stackNumbers.push(2);
        stackNumbers.push(15);
        stackNumbers.push(8);
        stackNumbers.push(5);
        stackNumbers.push(27);
        String theResult = String.valueOf(stackNumbers);
        String therigh = "Stack{top=Node{value=27, pointerToNextNode=Node{value=5, pointerToNextNode=Node{value=8, pointerToNextNode=Node{value=15, pointerToNextNode=Node{value=2, pointerToNextNode=Node{value=1, pointerToNextNode=null}}}}}}}";

        assertEquals(therigh, theResult);
    }

    @Test
//Can successfully pop off the stack
    void popFromStack() {
        Stack<Integer> stackNumbers = new Stack<>();
        stackNumbers.push(1);
        stackNumbers.push(2);
        stackNumbers.push(15);
        stackNumbers.push(8);
        stackNumbers.push(5);
        stackNumbers.push(27);
        stackNumbers.pop();
        String theResult = String.valueOf(stackNumbers);
        String therigh = "Stack{top=Node{value=5, pointerToNextNode=Node{value=8, pointerToNextNode=Node{value=15, pointerToNextNode=Node{value=2, pointerToNextNode=Node{value=1, pointerToNextNode=null}}}}}}";

        assertEquals(therigh, theResult);
    }

    @Test
//  Can successfully empty a stack after multiple pops
    void emptyStackAfterMultiPops() {
        Stack<Integer> stackNumbers = new Stack<>();
        stackNumbers.push(1);
        stackNumbers.push(2);

        stackNumbers.pop();
        stackNumbers.pop();
        String theResult = stackNumbers.toString();
        System.out.println(theResult);
        assertEquals("Stack{top=null}", theResult);
    }

    @Test
//    Can successfully peek the next item on the stack
    void peekStack() {
        Stack<Integer> stackNumbers = new Stack<>();
        stackNumbers.push(1);
        stackNumbers.push(2);
        stackNumbers.push(15);
        stackNumbers.push(8);
        stackNumbers.push(5);
        stackNumbers.push(27);
        System.out.println(stackNumbers.peek());

        int theResult = stackNumbers.peek();

        assertEquals(27, theResult);
    }

    @Test
//    Can successfully instantiate an empty stack
void instantiateEmptystack(){
    Stack<Integer> stackNumbers = new Stack<>();

    assertEquals("Stack{top=null}", stackNumbers.toString());
}
    @Test
//Calling pop or peek on empty stack raises exception
    void popEmpty() {
        Stack<Integer> stackNumbers = new Stack<>();
        String exception= "{NULL}";

        assertEquals(exception,stackNumbers.pop());
    }
//Can successfully enqueue into a queue
    @Test
    void enqueue(){
        Queue<Integer> stackNumbers = new Queue<>();
        stackNumbers.enqueue(5);
        assertEquals("Queue{front=Node{value=5, pointerToNextNode=null}, back=Node{value=5, pointerToNextNode=null}}",stackNumbers.toString());

    }
//Can successfully enqueue multiple values into a queue
    @Test
    void enqueueMultiValue(){
        Queue<Integer> stackNumbers = new Queue<>();
        stackNumbers.enqueue(5);
        stackNumbers.enqueue(0);
        assertEquals("Queue{front=Node{value=5, pointerToNextNode=Node{value=0, pointerToNextNode=null}}, back=Node{value=0, pointerToNextNode=null}}",stackNumbers.toString());
    }
//Can successfully dequeue out of a queue the expected value
    @Test
    void sequeue(){
        Queue<Integer> stackNumbers = new Queue<>();
        stackNumbers.enqueue(1);
        stackNumbers.enqueue(7);
        assertEquals("7",stackNumbers.dequeue().toString());
    }
//Can successfully peek into a queue, seeing the expected value
    @Test
    void peekIntoQueue(){
        Queue<Integer> stackNumbers = new Queue<>();
        stackNumbers.enqueue(1);
        stackNumbers.enqueue(7);

        assertEquals("Node{value=1, pointerToNextNode=Node{value=7, pointerToNextNode=null}}",stackNumbers.peek());
    }
//Can successfully empty a queue after multiple dequeues
    @Test
    void emptyQueueAfterDequeues(){
        Queue<Integer> stackNumbers = new Queue<>();
        stackNumbers.enqueue(1);
        stackNumbers.enqueue(7);

        stackNumbers.dequeue();
        stackNumbers.dequeue();

        assertEquals("Queue{front=null, back=Node{value=7, pointerToNextNode=null}}",stackNumbers.toString());
    }
//Can successfully instantiate an empty queue
    @Test
    void instantiateAnEmptyQueue(){
        Queue<Integer> stackNumbers = new Queue<>();
        assertEquals("Queue{front=null, back=null}", stackNumbers.toString());
    }
//Calling dequeue or peek on empty queue raises exception
    @Test
    void emptyQPeek(){
        Queue<Integer> stackNumbers = new Queue<>();
        assertEquals("Queue{front=null, back=null}", stackNumbers.toString());
    }
}
